name: Update Action Versions

on:
  schedule:
    - cron: '0 8 * * *' # every day at 8AM UTC
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update_versions:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v5

      - name: Ensure docs folder exists
        run: mkdir -p docs

      - name: Generate Markdown file with release notes, avatars, and links
        run: |
          #!/bin/bash
          set -e

          ACTIONS=(
            "actions/runner"
            "actions/toolkit"
            "actions/go-dependency-submission"
            "actions/javascript-action"
            "actions/hello-world-javascript-action"
            "actions/github-script"
            "actions/first-interaction"
            "actions/deploy-pages"
            "actions/dependency-review-action"
            "actions/delete-package-versions"
            "actions/create-github-app-token"
            "actions/configure-pages"
            "actions/attest-sbom"
            "actions/attest-build-provenance"
            "actions/attest"
            "actions/add-to-project"
            "actions/upload-artifact"
            "actions/download-artifact"
            "actions/cache"
            "actions/setup-node"
            "actions/checkout"
            "actions/starter-workflows"
            "actions/stale"
            "actions/setup-python"
            "actions/setup-java"
            "actions/setup-go"
            "actions/setup-dotnet"
            )

          echo "# GitHub Actions Versions" > docs/index.md
          echo "" >> docs/index.md

          for repo in "${ACTIONS[@]}"; do
            echo "## $repo" >> docs/index.md
            echo "" >> docs/index.md
            echo "| Major | Version | Release Date | Link |" >> docs/index.md
            echo "|-------|---------|-------------|------|" >> docs/index.md

            releases=$(curl -s "https://api.github.com/repos/$repo/releases")
            tags=$(echo "$releases" | jq -r '.[].tag_name' | grep -E '^v[0-9]+(\.[0-9]+)*$')
            majors=$(echo "$tags" | grep -o '^v[0-9]\+' | sort -Vr | uniq | head -n 2)

            # Table rows
            for major in $majors; do
              major_releases=$(echo "$releases" | jq -c ".[] | select(.tag_name|startswith(\"$major.\"))")
              if [[ -z "$major_releases" ]]; then
                major_releases=$(echo "$releases" | jq -c ".[] | select(.tag_name==\"$major\")")
              fi
              echo "$major_releases" | jq -c '.' | while read -r rel; do
                tag=$(echo "$rel" | jq -r '.tag_name')
                date=$(echo "$rel" | jq -r '.published_at' | cut -d'T' -f1)
                url=$(echo "$rel" | jq -r '.html_url')
                echo "| $major | $tag | $date | [View Release]($url) |" >> docs/index.md
              done
            done

            echo "" >> docs/index.md

            # Release details
            for major in $majors; do
              major_releases=$(echo "$releases" | jq -c ".[] | select(.tag_name|startswith(\"$major.\"))")
              if [[ -z "$major_releases" ]]; then
                major_releases=$(echo "$releases" | jq -c ".[] | select(.tag_name==\"$major\")")
              fi
              echo "$major_releases" | jq -c '.' | while read -r rel; do
                tag=$(echo "$rel" | jq -r '.tag_name')
                notes=$(echo "$rel" | jq -r '.body // "No release notes."')
                author_login=$(echo "$rel" | jq -r '.author.login')
                author_avatar=$(echo "$rel" | jq -r '.author.avatar_url')
                url=$(echo "$rel" | jq -r '.html_url')
                echo "<details><summary><strong>$tag Release Notes</strong></summary>" >> docs/index.md
                echo "<img src=\"$author_avatar\" alt=\"@$author_login\" width=\"32\" height=\"32\" /> <a href=\"https://github.com/$author_login\">@$author_login</a>" >> docs/index.md
                echo "" >> docs/index.md
                echo "$notes" >> docs/index.md
                echo "<br /><a href=\"$url\">View Release</a>" >> docs/index.md
                echo "</details>" >> docs/index.md
                echo "" >> docs/index.md
              done
            done

            echo "" >> docs/index.md
          done

      - name: Commit and push changes
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }} 
        run: |
          git config --global user.email "workflow-bot@github.com"
          git config --global user.name "Workflow Bot"
          git remote set-url origin https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }}
          git add docs/index.md
          git commit -m "Update action versions [skip ci]" || exit 0
          git push